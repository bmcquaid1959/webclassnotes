[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2\n\n\nEdited by Bob"
  },
  {
    "objectID": "AdvStats1/advancedstats.html",
    "href": "AdvStats1/advancedstats.html",
    "title": "Advanced Statistics",
    "section": "",
    "text": "RPython\n\n\nfizz_buzz <- function(fbnums = 1:50) {\n  output <- dplyr::case_when(\n    fbnums %% 15 == 0 ~ \"FizzBuzz\",\n    fbnums %% 3 == 0 ~ \"Fizz\",\n    fbnums %% 5 == 0 ~ \"Buzz\",\n    TRUE ~ as.character(fbnums)\n  )\n  print(output)\n}\n\n\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)"
  },
  {
    "objectID": "Opt1/contentW1.html",
    "href": "Opt1/contentW1.html",
    "title": "Introduction to Modeling and Linear Programming",
    "section": "",
    "text": "The asynchronous content for week 1 serves two purposes:\n\nan introduction to Management Science, Systems Theory, and some historical development, and\nThe basics of the linear programming process using Excel and the graphical solution method. Asynchronous content for Week 2 provides five additional examples using Excel Solver.\n\n\n\n\n\n\n\nImportant\n\n\n\nWhile the introductory lecture positions the course content in the realm of Business Analytics, the examples covered focus on the process we will use throughout the course:\n\ndocument input data\nidentify the objective to be optimized\nidentify the applicable constraints\nconstruct the model\n\nhighlight the variables\nstructure the constraints in standard form\nformulate the objective function\nanalyze the model\nconduct sensitivity analysis\ndescribe and interpret results\n\n\nWhile viewing the asynchronous content (and for the rest of the class), make sure you understand the concepts in item 4 above. You will get better at this after Week 2."
  },
  {
    "objectID": "Opt1/contentW1.html#things-to-do",
    "href": "Opt1/contentW1.html#things-to-do",
    "title": "Introduction to Modeling and Linear Programming",
    "section": "Things to do",
    "text": "Things to do\nThe goal to be prepared for class is to view the asynchronous content before the live session for that week and complete/upload the practice problems (if provided).\n\n\n\n\n\n\nThings to do\n\n\n\n\nView the asynchronous content for Week 1.\nIf you purchased the Ragsdale book, review the examples in chapters 1 and 2. Focus on step 4 in the “construct the model” list above.\nPeruse the following sections at Perkins Intro to LP 3.1 What is a Linear Programming Problem 3.4 A Diet Problem 3.5 A Work Scheduling Problem 3.8 Blending Problems\nTry to setup the example problems for Item 3 in each of these sections using Excel. The examples are in algebraic formulation (which will help when we get to Week 3 and 4)\nBe prepared at the beginning of the live session with any questions, clarifications, or observations you have."
  },
  {
    "objectID": "Opt1/contentW1.html#deliverables-for-next-week",
    "href": "Opt1/contentW1.html#deliverables-for-next-week",
    "title": "Introduction to Modeling and Linear Programming",
    "section": "Deliverables for next week",
    "text": "Deliverables for next week\n\n\n\n\n\n\nDeliverables for next week\n\n\n\nDownload Homework 1 file. Place your Pepperdine User ID at the beginning of the filename. Upload the completed (or as much as you did) work to the Assessments link at 2pep.\nComplete and upload the practice problems available in the Week 2 asynchronous content.\n\nAll due by midnight PST on Monday, January 9:\n\nSolutions to homework 1 will be available after the deadline. No late work is accepted."
  },
  {
    "objectID": "Opt1/contentW2.html",
    "href": "Opt1/contentW2.html",
    "title": "Examples of Linear Programming Problems Using Spreadsheets",
    "section": "",
    "text": "The asynchronous content for week 2 presents five examples of linear programs structured specifically to use Excel Solver.\n\nDiet Problem\nA characteristic of this particular diet problem is to use proportions of each ingredient which must sum to 1. Then, the solution minimizes total cost of one pound of the ingredients the while meeting the nutritional requirement limits.\nCrude Oil Refinery Problem\nThis is a basic blending problem wherein four crude oils are blended to create four outputs (gasoline, heating oil, jet fuel, and lubricating oil). The input-output table shows the yield from each type of crude (input) processed on unit I or II. For example, a barrel of crude #4 processed in Unit 1 produces 0.5 gallons of Gasoline, 0.1 barrels of Heating Oil, 0.2 barrels of Jet Fuel, no lube oil, and 0.2 barrels are lost in processing. Notice only Crude #4 can be produced in Unit II both reduces loss and produces Lube Oil. The goal is to maximize profit while crude oil (input) is only available in limited supply and the products (output) each have a limit on maximum demand.\nPortfolio Section Problem\nThis is a basic - single investment at time period 0 - portfolio problem with limits around average length of investment, average risk, average growth potential, and minimum cash requirements. We can use set the variables as the proportion invested in each summing to 1 OR to some arbitrary budget amount to analyze this problem.\nAgriculture Application Problem\nThis problem is somewhat like a blending problem where you have three brands of fertilizer each contributing varying amounts of nitrogen, phosphoric acid, and potash - how many bags of each brand (whole bags only) will satisfy the chemical restrictions and minimize cost?\nMedia Selection Problem The objective is to maximize ad exposures as measured by”audience points” given a limited budget and some investment restrictions. A main concern in this model is to structure the constraints in standard form (linear combination of variables on the left hand side and only a numeric value on the right hand side of the inequalities).\n\n\n\n\n\n\n\nImportant\n\n\n\nMajor takeaways upon viewing these examples\n\nStructure variables, constraint formulas, and objective function\nLearn how to use relative and absolute cell references\nUsing the SUMPRODUCT formula\nLoading the model into Excel Solver\n\nYou will get better at this after completing Homework 1 and 2."
  },
  {
    "objectID": "Opt1/contentW2.html#things-to-do",
    "href": "Opt1/contentW2.html#things-to-do",
    "title": "Examples of Linear Programming Problems Using Spreadsheets",
    "section": "Things to do",
    "text": "Things to do\nView the asynchronous content before the live session for that week and complete/upload the practice problems (if provided).\n\n\n\n\n\n\nThings to do before Jan 10\n\n\n\n\nView the asynchronous content for Week 2.\nComplete and upload the practice problems (part of Participation grade)\nIf you purchased the Ragsdale book, review the examples in chapters 3. Focus on step 4 in the “construct the model” from the Important note in Week 1.\nPeruse the following sections at Perkins Intro to LP 3.2 The Graphical Solution of Two-Variable Linear Programming Problems 3.7 Short-term Financial Planning 3.9 Production Process Models 3.10 Using Linear Programming to Solve Multiperiod Decision Problems: An Inventory Model 3.11 Multiperiod Financial Models 3.12 Multiperiod Work Scheduling\nTry to setup the example problems for Item 4 in each of these sections using Excel. The examples are in algebraic formulation (which will help when we get to Week 3 and 4)\nBe prepared at the beginning of the live session with any questions, clarifications, or observations you have."
  },
  {
    "objectID": "Opt1/contentW2.html#deliverables-for-next-week",
    "href": "Opt1/contentW2.html#deliverables-for-next-week",
    "title": "Examples of Linear Programming Problems Using Spreadsheets",
    "section": "Deliverables for next week",
    "text": "Deliverables for next week\n\n\n\n\n\n\nDeliverables for next week\n\n\n\nDownload Homework 2 file. Place your Pepperdine User ID at the beginning of the filename. Upload the completed (or as much as you did) work to the Assessments link at 2pep.\nComplete and upload the practice problems available in the Week 3 asynchronous content.\n\nAll due by midnight PST on Monday, January 16:\n\nSolutions to homework 1 will be available after the deadline. No late work is accepted."
  },
  {
    "objectID": "Opt1/optimization.html",
    "href": "Opt1/optimization.html",
    "title": "Course Plan",
    "section": "",
    "text": "Access to Learning Management System\n\n\n\nFor those enrolled, this course is available at: 2pep Online Business. The course title is: DESC 622-01OL:2690 Optimization Modeling"
  },
  {
    "objectID": "Opt1/optimization.html#course-description",
    "href": "Opt1/optimization.html#course-description",
    "title": "Course Plan",
    "section": "Course Description",
    "text": "Course Description\nOptimization problems arise in a multitude of ways as a means of solving problems in engineering design, portfolio design, system management, parameter estimation, statistics, and in the modeling of physical and behavioral phenomena. This is an introductory course in numerical methods for continuous optimization in finite dimensions. Optimization modeling techniques and numerical solution methodology will be applied to a range of important problems in operations, marketing, and finance. The optimization tools that we consider cover much of what is known as mathematical programming. We begin with linear programming and then progress through to nonlinear programming and integer programming."
  },
  {
    "objectID": "Opt1/optimization.html#course-schedule",
    "href": "Opt1/optimization.html#course-schedule",
    "title": "Course Plan",
    "section": "Course Schedule",
    "text": "Course Schedule\nThere are three phases to the course schedule, basics of LP (weeks 1 and 2), the simplex method (weeks 3 and 4), and network and integer modeling (weeks 6-7). Sensitivity analysis is spread throughout the course.\n\nIntroduction to Modeling and Linear Programming\n\nlive session Jan 3\n\nExamples of Linear Programming Problems Using Spreadsheets\n\nHomework 1 due Jan 9 by midnight\nlive session Jan 10\n\nThe Simplex Method, Part I\n\nHomework 2 due Jan 16 by midnight.\nlive session Jan 17\n\nThe Simplex Method, Part II\n\nHomework 3 due Jan 23 by midnight\nlive session Jan 24\ndistribute Exam 1 (take home)\n\nSpreadsheet Modeling and Sensitivity Analysis\n\nExam 1 due Jan 30 by midnight\nlive session Jan 31\n\nNetwork and Integer modeling\n\nHomework 4 due Feb 6 by midnight\nlive session Feb 7\ndistribute Exam 2 Part 1 (take home)\n\nInteger Programming\n\nHomework 5 due Feb 13 by midnight\nExam 2, Part 1 due Jan 30 by midnight\nlive session Feb 14\n\nlive session will include Exam 2 part 2 in class (one hour) and a course wrap up (30 minutes)"
  },
  {
    "objectID": "Opt1/solutionsEX1.html",
    "href": "Opt1/solutionsEX1.html",
    "title": "Optimization Modeling",
    "section": "",
    "text": "Will be posted after due date for this assignment"
  },
  {
    "objectID": "Opt1/solutionsEX2P1.html",
    "href": "Opt1/solutionsEX2P1.html",
    "title": "Optimization Modeling",
    "section": "",
    "text": "Will be posted after due date for this assignment"
  },
  {
    "objectID": "Opt1/solutionsHW1.html",
    "href": "Opt1/solutionsHW1.html",
    "title": "Optimization Modeling",
    "section": "",
    "text": "Will be posted after due date for this assignment"
  },
  {
    "objectID": "Opt1/solutionsHW2.html",
    "href": "Opt1/solutionsHW2.html",
    "title": "Optimization Modeling",
    "section": "",
    "text": "Will be posted after due date for this assignment"
  },
  {
    "objectID": "Opt1/solutionsHW3.html",
    "href": "Opt1/solutionsHW3.html",
    "title": "Optimization Modeling",
    "section": "",
    "text": "Will be posted after due date for this assignment"
  },
  {
    "objectID": "Opt1/solutionsHW4.html",
    "href": "Opt1/solutionsHW4.html",
    "title": "Optimization Modeling",
    "section": "",
    "text": "Will be posted after due date for this assignment"
  },
  {
    "objectID": "Opt1/solutionsHW5.html",
    "href": "Opt1/solutionsHW5.html",
    "title": "Optimization Modeling",
    "section": "",
    "text": "Will be posted after due date for this assignment"
  },
  {
    "objectID": "Sim1/sim2.html",
    "href": "Sim1/sim2.html",
    "title": "Sim Page 2",
    "section": "",
    "text": "This is testing a second main page under simulation."
  },
  {
    "objectID": "Sim1/simulation.html",
    "href": "Sim1/simulation.html",
    "title": "Simulation",
    "section": "",
    "text": "I am testing subfolders.\n\n\nThis is just a test to see the side bar.\n\n\n\nTesting DIagrams\n\n\n\n\n    flowchart LR\n      A[Hard edge] --> B(Round edge)\n      B --> C{Decision}\n      C --> D[Result one]\n      C --> E[Result two]"
  },
  {
    "objectID": "Sol/index.html#solutions-for-advanced-statistics",
    "href": "Sol/index.html#solutions-for-advanced-statistics",
    "title": "Solutions",
    "section": "Solutions for Advanced Statistics",
    "text": "Solutions for Advanced Statistics"
  },
  {
    "objectID": "Sol/index.html#solutions-for-simulation-modeling",
    "href": "Sol/index.html#solutions-for-simulation-modeling",
    "title": "Solutions",
    "section": "Solutions for Simulation Modeling",
    "text": "Solutions for Simulation Modeling"
  },
  {
    "objectID": "Ana/ScriptingQt.html",
    "href": "Ana/ScriptingQt.html",
    "title": "Beta Mu Analytics",
    "section": "",
    "text": "1 Scripting in the Jupyter Qt Console\nThe Jupyter Qt Console blends the simplicity of a terminal with features of a GUI to quickly test ideas, explore datasets, and work through tutorials. The interface is not intended for extended interactive use, but includes line numbers, multiple tabs, rich media output, command history retrieval across sessions, multiline editing, syntax highlighting, session export, and more.\nThere is a pretty quick tutorial available if you wish to practice a bit after completing this section.\n1.1 Seaborn Data Visualization Library\nViewing plots in the QtConsole requires installation of the seaborn data visualization library. We’ll use my_first_env environment during this section.\n\nIn Navigator, make the my_first_env environment as the active environment.\nSelect Not Installed in the package dropdown menu\nEnter seaborn in the package search field\nSelect the check box  next to the seaborn package.\nSelect the Apply button at the bottom of the panel.\nWhen the “Install packages” window pops up, select Apply in that window to install seaborn and required dependencies (there may be many).\n\n2 Install and Launch Jupyter Qt Console Using Navigator\n\nSelect the Home  tab in Navigator.\nSelect my_first_env in the dropdown to identify the environment in which to install Qt Console.\nSelect the Install button on the Qt Console tile.\n\nIgnore the package named jupyter console as it does not include graphics capability.\nIf no Qt Console package is available on the Home  tab, then it has not been installed yet.\n\nIn Navigator, select the  Environment tab and make the my_first_env environment as the active environment.\nSelect Not Installed in the package dropdown menu\nEnter qtconsole in the package search field\nSelect the check box  next to the qtconsole package.\nSelect the Apply button at the bottom of the panel.\nWhen the “Install packages” window pops up, select Apply in that window to install seaborn and required dependencies (there may be many).\nReturn to the  Home tab, select the  Refresh button. Complete steps 1-2 above.\n\nIf Qt console still does not appear in a tile,\n\nReturn to the Environments tab and select the  button for the my_first_env environment and select Open Terminal.\nEnter conda install qtconsole\nReview the messages returned, if it warns you to upgrade, enter conda update -n base -c defaults conda\nThere will be a lengthy message to upgrade, downgrade, and remove packages below which you will need to enter y at the **Proceed? ([y],n) prompt.\nYou may get a verification error, but the installation was likely successful.\n\n\nLaunch Jupyter Qt Console\n\nReturn to the Environments tab and select the  button for the my_first_env environment and select Open Terminal.\nEnter jupyter qtconsole and hit enter.\nInput 5 * 2 + (10 / 2) adjacent to the In [1]: and Enter. The result should say Out[1]: 15.0**.\n\n\n3 Qt Console Controls\n3.1 Syntax Style\nThe console provides color-coding for various elements like the In and Out called syntax highlighting. You can choose from a large number of style types by selecting View  Syntax Style at your discretion.\nOpen a new tab by selecting File  New Tab with New kernel. You can rename the tab by entering Window  Rename Current Tab. You can choose a different syntax style on each tab if you wish. That can be helpful when experimenting with different codes.\n3.2 Keyboard Shortcuts\nKeyboard shortcuts (or keybindings) such as Ctrl-C for copy are available at Help  QtConsole help under the Key bindings heading.\nThe box below contains a list of these, some you will use all the time, others you may not use at all.\n\n\n\n\n\n\nKey Bindings\n\n\n\n\n\n\nCtrl-c copy highlighted text to clipboard (prompts are automatically stripped).\nCtrl-Shft-C copy highlighted text to clipboard (prompts are not stripped).\nCtrl-v paste text from clipboard.\nCtrl-z undo (retrieves lost text if you move out of a cell with the arrows).\nCtrl-Shft-Z redo.\nCtrl-l clear terminal.\n\nCtrl-a go to beginning of line.\nCtrl-e go to end of line.\nCtrl-p previous line (like up arrow)\nCtrl-n next line (like down arrow)\nCtrl-f forward (like right arrow)\nCtrl-b back (like left arrow)\nAlt-&lt; move to the beginning of the input region.\nAlt-&gt; move to the end of the input region.\n\nCtrl-y yank (paste)\nCtrl-d delete next character, or exits if input is empty\nAlt-d delete next word.\nAlt-backspace: delete previous word.\nCtrl-+ increase font size.\nCtrl– decrease font size.\n\nCtrl-. force a kernel restart (a confirmation dialog appears).\n\nCtrl-Alt-space toggle full screen. (Command-Control-Space on Mac OS X)\nCtrl-o move to ‘other’ area, between pager and terminal.\nCtrl-u kill from cursor to the begining of the line.\nCtrl-k kill from cursor to the end of the line.\n\n\n\n\n3.2.1 Running code\nWhen typing code in the console, the code on that line will execute if you select Enter unless you are working on a multi-line script.\nA multi-line script can be input by selecting Ctrl-Enter after typing the first line of code. Each line input after which you insert a new line by selecting Ctrl-Enter. Once you’ve input all lines of code, select Shft-Enter to execute the script.\nBasics\n\nEnter execute single line\nCtrl-Enter force new line, never causes execution.\nShft-Enter force execution regardless of where cursor is, no newline added.\n\n\n\n\n\n\n\nPractice running multiline code in Qt Console\n\n\n\n\n\nPractice inputting the code shown below one line at a time.\n\nAfter inputting each line, select Ctrl-Enter\nMake sure to include the semi-colon (;) only at the end of the last line\nAfter inputting the semi-colon on the last line, select Shft-Enter\n\nThe output should be four line graphs of Density vs tip for each day in the dataset. You can save this as an HTML file and open the code and graphs in a browser.\nimport seaborn as sns\ntips = sns.load_dataset('tips')\nordered_days = tips.day.value_counts().index\nchart = sns.FacetGrid(tips, row='day', row_order=ordered_days, height 1.5, aspect = 4)\nchart.map(sns.kdeplot, 'tips');\n\n\n\n3.3 Tabs and Kernels\nA kernel is the active “computational engine” that executes code. When you add a new tab you have three options for the kernel\n\nNew tab with new kernel: Opens a new tab with a new IPython kernel\nNew tab with same kernel: Creates a child of a parent kernel loaded on a particular tab. Objects initialized on the parent tab are accessible in both tabs.\nNew tab with existing kernel: Opens a new tab and lets you choose from kernels other than IPython.\n\nThe first two are the most common. The New tab with same kernel is convenient if you are investigating alternative scripts or writing functions."
  }
]